directive @auth(getInfo: Boolean, reqPermission: [Permission!]) on FIELD_DEFINITION

union ProfileDetail = StudentProfile | TeacherProfile | OfficalsProfile

enum UserStatus {
  WAIT
  USER
  BAN
}

type Profile {
  id: ObjectID!
  name: String!
  nickname: String!
  phone: Phone!
  detail: ProfileDetail!
  status: UserStatus!
}

type StudentProfile {
  grade: Int!
  class: Int!
  number: Int!
}
input StudentProfileInput {
  grade: Int!
  class: Int!
  number: Int!
}

type TeacherProfile {
  subject: [String!]!
}

input TeacherProfileInput {
  subject: [String!]!
}

type OfficalsProfile {
  role: String!
  description: String!
}

input OfficalsProfileInput {
  role: String!
  description: String
}

input SignUpInput {
  name: String!
  nickname: String
  password: String!
  phone: SignUpPhoneCode!
  detail: ProfileCode!
}

enum CafeteriaType {
  BREAKFAST
  LUNCH
  DINNER
}

type Cafeteria {
  type: CafeteriaType!
  calorie: String!
  content: String!
  nutrient: String!
  origin: String!
  date: Timestamp!
}

input CafeteriaFilter {
  dateStart: Timestamp
  dateEnd: Timestamp
  type: CafeteriaType
}

type ProfileWithToken {
  profile: Profile!
  token: JWT!
}

type Query {
  myProfile: Profile @auth(getInfo: true)
  cafeteria(filter: CafeteriaFilter): [Cafeteria!]!
}

type Mutation {
  signIn(phone: Phone!, password: String!): ProfileWithToken!
  signOut: Nothing!
  verifyPhone(number: Phone!): String!
  checkVerifyPhoneCode(number: Phone!, code: String!): SignUpPhoneCode!
  setProfile(student:StudentProfileInput, teacher:TeacherProfileInput, officals:OfficalsProfileInput): ProfileCode!
  signUp(input: SignUpInput!): ProfileWithToken
}

scalar Phone
scalar SignUpPhoneCode
scalar ProfileCode 
scalar ObjectID
scalar Timestamp
scalar JWT
scalar Nothing
scalar Permission
