directive @auth(
  getInfo: Boolean
  reqPermission: [Permission!]
) on FIELD_DEFINITION

union ProfileDetail =
    StudentProfile
  | TeacherProfile
  | OfficialsProfile
  | AnonProfile 
enum UserStatus {
  WAIT
  USER
  BAN
}

enum UserRole {
  Student
  Teacher
  Officials
}


type Profile {
  id: ObjectID!
  name: String!
  nickname: String!
  phone: Phone
  detail: ProfileDetail!
  status: UserStatus!
}

type StudentProfile {
  grade: Int!
  class: Int!
  number: Int!
}
input StudentProfileInput {
  grade: Int!
  class: Int!
  number: Int!
}

type TeacherProfile {
  subject: [String!]!
}

input TeacherProfileInput {
  subject: [String!]!
}

type OfficialsProfile {
  role: String!
  description: String!
}

type AnonProfile {
  dummy: Nothing
}

input OfficialsProfileInput {
  role: String!
  description: String
}

input SignUpInput {
  name: String!
  nickname: String
  password: String!
  phone: SignUpPhoneCode!
  detail: ProfileCode!
}

enum SchoolMealType {
  BREAKFAST
  LUNCH
  DINNER
}

type SchoolMeal {
  type: SchoolMealType!
  calorie: String!
  content: String!
  nutrient: String!
  origin: String!
  date: Timestamp!
}

input SchoolMealFilter {
  dateStart: Timestamp
  dateEnd: Timestamp
  type: SchoolMealType
}

type ProfileWithToken {
  profile: Profile!
  token: JWT!
}

type Post {
  id: ObjectID!
  category: Category!
  like: Int
  isLike: Boolean
  author: Profile!
  title: String!
  content: String
  createAt: Timestamp!
  updateAt: Timestamp!
  comment: [Comment!]
}

type Comment {
  id: ObjectID!
  author: Profile!
  content: String!
  createAt: Timestamp!
  updateAt: Timestamp!
}

input NewCategory {
  name: String!
  reqPermission: [String!]!
  anonAble: Boolean!
  readAbleRole: [UserRole!]!
  writeAbleRole: [UserRole!]!
}

type Category {
  id: ObjectID!
  name: String!
  reqPermission: [String!]!
  anonAble: Boolean!
  readAbleRole: [UserRole!]!
  writeAbleRole: [UserRole!]!
}

input NewPost {
  category: ObjectID!
  title: String!
  content: String!
  anon: Boolean
}

input NewComment {
  post: ObjectID!
  content: String!
  anon: Boolean
}

input CommentFilter {
  limit: Int
  offset: Int
  loadOnlyComment: Boolean
}

input LikePostInput {
  post: ObjectID!
  status: Boolean!
}

input NewCalendar {
  year: Uint!
  month: Uint!
  day: Uint!
  title: String!
  description: String!
  icon: String!
}

input CalendarFilter {
  year: Uint!
  month: Uint!
}

type Calendar {
  id: ObjectID!
  year: Uint!
  month: Uint!
  day: Uint!
  title: String!
  description: String!
  icon: String!
}

input UpdateSchedule {
  dow: Uint!
  period: Uint!
  grade: Uint!
  class: Uint!
  subject: String!
  teacher: String!
  description: String!
  classRoom: String!
}

input ScheduleFilter {
  grade: Uint!
  class: Uint!
  dow: Uint!
}

input ScheduleDelFilter {
  grade: Uint!
  class: Uint!
  dow: Uint!
  period: Uint!
}

type Schedule {
  dow: Uint!
  period: Uint!
  grade: Uint!
  class: Uint!
  subject: String!
  teacher: String!
  description: String!
  classRoom: String!
}

input EmailAliasesInput {
  from: String!
  to: String!
}

type EmailAliases {
  from: String!
  to: String!
}


type Query {
  myProfile: Profile @auth(getInfo: true)
  schoolMeal(filter: SchoolMealFilter): [SchoolMeal!]!
  post(id: ObjectID!, comment: CommentFilter): Post! @auth(getInfo: true)
  posts(categoryID: ObjectID!, offset: Int, limit: Int): [Post!]! @auth(getInfo: true)
  categories: [Category!]! @auth

  calendar(filter: CalendarFilter!): [Calendar!]!
  schedule(filter: ScheduleFilter!): [Schedule!]!

  emailAliases: EmailAliases @auth(getInfo: true)
}

type Mutation {
  signIn(phone: Phone!, password: String!): ProfileWithToken!
  signOut: Nothing! @auth
  verifyPhone(number: Phone!): String!
  checkVerifyPhoneCode(number: Phone!, code: String!): SignUpPhoneCode!
  setProfile(
    student: StudentProfileInput
    teacher: TeacherProfileInput
    officials: OfficialsProfileInput
  ): ProfileCode!
  signUp(input: SignUpInput!): ProfileWithToken
  createCategory(input: NewCategory!): ObjectID! @auth(reqPermission: ["admin"])

  createPost(input: NewPost!): ObjectID! @auth
  likePost(input: LikePostInput!): Nothing @auth
  addComment(input: NewComment!): ObjectID! @auth
  deleteComment(postid: ObjectID!, commentid: ObjectID!): Nothing! @auth
  
  addCalendar(input: NewCalendar!): ObjectID! @auth(reqPermission: ["calendar"])
  deleteCalendar(target: ObjectID!): Nothing! @auth(reqPermission: ["calendar"])

  updateSchedule(input: UpdateSchedule!): Nothing! @auth(reqPermission: ["schedule"])
  deleteSchedule(target: ScheduleDelFilter!): Nothing! @auth(reqPermission: ["schedule"])

  updateEmailAliases(input: EmailAliasesInput!): Nothing! @auth(getInfo: true)
  deleteEmailAliases: Nothing! @auth(getInfo: true)
}

scalar Phone
scalar SignUpPhoneCode
scalar ProfileCode
scalar ObjectID
scalar Timestamp
scalar JWT
scalar Nothing
scalar Permission
scalar Uint
