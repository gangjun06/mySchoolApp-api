// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ProfileDetail interface {
	IsProfileDetail()
}

type Cafeteria struct {
	Type     CafeteriaType `json:"type"`
	Calorie  string        `json:"calorie"`
	Content  string        `json:"content"`
	Nutrient string        `json:"nutrient"`
	Origin   string        `json:"origin"`
	Date     Timestamp     `json:"date"`
}

type CafeteriaFilter struct {
	DateStart *Timestamp     `json:"dateStart"`
	DateEnd   *Timestamp     `json:"dateEnd"`
	Type      *CafeteriaType `json:"type"`
}

type OfficalsProfile struct {
	Role        string `json:"role"`
	Description string `json:"description"`
}

func (OfficalsProfile) IsProfileDetail() {}

type OfficalsProfileInput struct {
	Role        string  `json:"role"`
	Description *string `json:"description"`
}

type Profile struct {
	ID       ObjectID      `json:"id"`
	Name     string        `json:"name"`
	Nickname string        `json:"nickname"`
	Phone    Phone         `json:"phone"`
	Detail   ProfileDetail `json:"detail"`
	Status   UserStatus    `json:"status"`
}

type SignUpInput struct {
	Name     string  `json:"name"`
	Nickname *string `json:"nickname"`
	Password string  `json:"password"`
	Phone    string  `json:"phone"`
	Detail   string  `json:"detail"`
}

type StudentProfile struct {
	Grade  int `json:"grade"`
	Class  int `json:"class"`
	Number int `json:"number"`
}

func (StudentProfile) IsProfileDetail() {}

type StudentProfileInput struct {
	Grade  int `json:"grade"`
	Class  int `json:"class"`
	Number int `json:"number"`
}

type TeacherProfile struct {
	Subject []string `json:"subject"`
}

func (TeacherProfile) IsProfileDetail() {}

type TeacherProfileInput struct {
	Subject []string `json:"subject"`
}

type CafeteriaType string

const (
	CafeteriaTypeBreakfast CafeteriaType = "BREAKFAST"
	CafeteriaTypeLunch     CafeteriaType = "LUNCH"
	CafeteriaTypeDinner    CafeteriaType = "DINNER"
)

var AllCafeteriaType = []CafeteriaType{
	CafeteriaTypeBreakfast,
	CafeteriaTypeLunch,
	CafeteriaTypeDinner,
}

func (e CafeteriaType) IsValid() bool {
	switch e {
	case CafeteriaTypeBreakfast, CafeteriaTypeLunch, CafeteriaTypeDinner:
		return true
	}
	return false
}

func (e CafeteriaType) String() string {
	return string(e)
}

func (e *CafeteriaType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CafeteriaType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CafeteriaType", str)
	}
	return nil
}

func (e CafeteriaType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusWait UserStatus = "WAIT"
	UserStatusUser UserStatus = "USER"
	UserStatusBan  UserStatus = "BAN"
)

var AllUserStatus = []UserStatus{
	UserStatusWait,
	UserStatusUser,
	UserStatusBan,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusWait, UserStatusUser, UserStatusBan:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
